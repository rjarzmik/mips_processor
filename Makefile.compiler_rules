checkenv:
ifeq ($(GHDL),)
	$(error "This should be called from top Makefile, GHDL is empty !")
endif
ifeq ($(GHDLFLAGS),)
	$(error "This should be called from top Makefile, GHDLFLAGS is empty !")
endif
ifeq ($(OUT),)
	$(error "This should be called from top Makefile, OUT is empty !")
endif

# Function DEFINE_MODULE
# Should be called in each Makefile.module.
# The following parameters should be passed :
#   1: MODULE, the module name, ie. $(MODULE)/ directory should exist
#   2: PACKAGE, the module package (might be empty, then defaults to "work")
#   3: SRCS, the list of source files with $(MODULE)/ directory
#   4: UNITS, the list of units to compile, ie. the testbenches

define DEFINE_MODULE
# MODULE := $(1)
# PACKAGE := $(2)
# SRCS := $(3)
# UNITS := $(4)
# DEPENDENCIES := $(5)

REQUIRED_$(1) = $(foreach m,$(5),$(OUT)/$(m)/imported)
SOURCES_$(1) := $(wildcard $(addprefix $(1)/,$(3)))
OBJS_$(1) := $(foreach unit,$(4),$(OUT)/$(1)/$(unit).tb)
OUTDIRS_$(1) := $(sort $(dir $(OBJS_$(1)) $(OUT)/$(1)/))
GHDLFLAGS_$(1) := \
	$$(addprefix -P,$$(sort $$(dir $$(REQUIRED_$(1))) $$(dir $$(OUTDIRS_$(1))))) \
	-P$(OUT) --workdir=$(OUT)/ --work=$(2)

$$(OUTDIRS_$(1)):
	@mkdir -p $$@

$(OUT)/$(1):
	@mkdir -p $$@

$(OUT)/$(1)/sources: $$(SOURCES_$(1)) | $(OUT)/$(1)
	$$(file >$$@,$$^)

$(OUT)/$(1)/imported: $(OUT)/$(1)/sources $$(REQUIRED_$(1)) | checkenv $$(OUTDIRS_$(1))
	@mkdir -p $$(@D)
	$$(GHDL) -i $$(GHDLFLAGS) $$(GHDLFLAGS_$(1)) $$(SOURCES_$(1)) && touch $$@

$(OUT)/$(1)/%.tb: $(OUT)/$(1)/imported | $(OUT)/$(1)
	@mkdir -p $$(@D)
	$$(GHDL) -m -o $(OUT)/$(1)/$$* $$(GHDLFLAGS) $$(GHDLFLAGS_$(1)) $$* && touch $$@

$(OUT)/$(1)/compiled: $$(OBJS_$(1)) $(OUT)/$(1)/imported | $(OUT)/$(1)
	@mkdir -p $$(@D)
	$$(file >$$@,"")

compile_$(1): $(OUT)/$(1)/compiled
run_$(1): $(OUT)/$(1)/compiled | checkenv
	rsync -a $(1)/test/etc/ $(OUT)/$(1)/ || true
	cd $$(<D) && for tb in $(4); do $$(GHDL) -r $$(GHDLFLAGS) $$(GHDLFLAGS_$(1)) $$$$tb; done
.PHONY: compile_$(1) run_$(1)

endef
